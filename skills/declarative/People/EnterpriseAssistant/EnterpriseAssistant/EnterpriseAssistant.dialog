{
  "$kind": "Microsoft.AdaptiveDialog",
  "$designer": {
    "$designer": {
      "name": "EnterpriseAssistant",
      "description": "",
      "id": "Or2Fgn"
    }
  },
  "autoEndDialog": true,
  "defaultResultProperty": "dialog.result",
  "triggers": [
    {
      "$kind": "Microsoft.OnConversationUpdateActivity",
      "$designer": {
        "id": "376720",
        "comment": "This trigger runs when a conversation update activity is sent to the bot. This indicates a user or bot being added or removed from a conversation."
      },
      "actions": [
        {
          "$kind": "Microsoft.Foreach",
          "$designer": {
            "id": "518944",
            "name": "Loop: for each item",
            "comment": "For each member added to the conversation."
          },
          "itemsProperty": "turn.Activity.membersAdded",
          "actions": [
            {
              "$kind": "Microsoft.IfCondition",
              "$designer": {
                "id": "641773",
                "name": "Branch: if/else",
                "comment": "Checks that that member added ID does not match the bot ID. This prevents the greeting message from being sent when the bot is added to a conversation."
              },
              "condition": "=string(dialog.foreach.value.id) != string(turn.Activity.Recipient.id)",
              "actions": [
                {
                  "$kind": "Microsoft.IfCondition",
                  "$designer": {
                    "id": "Y1t1k4",
                    "comment": "If the user has been greeted before."
                  },
                  "condition": "=exists(user.greeted)",
                  "actions": [
                    {
                      "$kind": "Microsoft.SendActivity",
                      "$designer": {
                        "id": "yXbfKT",
                        "comment": "Shows returning user greeting to user."
                      },
                      "activity": "${SendActivity_GreetingReturningUser()}"
                    }
                  ],
                  "elseActions": [
                    {
                      "$kind": "Microsoft.SendActivity",
                      "$designer": {
                        "id": "XZRD8m",
                        "comment": "Shows new user greeting to user."
                      },
                      "activity": "${SendActivity_GreetingNewUser()}"
                    },
                    {
                      "$kind": "Microsoft.SetProperty",
                      "$designer": {
                        "id": "eV86Nf",
                        "comment": "Sets user.greeted to true. This value will persist in user state across conversations with the user."
                      },
                      "property": "user.greeted",
                      "value": "true"
                    }
                  ]
                }
              ]
            }
          ],
          "value": "dialog.foreach.value",
          "index": "dialog.foreach.index"
        }
      ]
    },
    {
      "$kind": "Microsoft.OnIntent",
      "$designer": {
        "id": "YQ6GAt",
        "name": "Bot Tour",
        "comment": "Triggered when the BotTour intent is recognized in the user's utterance."
      },
      "intent": "BotTour",
      "actions": [
        {
          "$kind": "Microsoft.TraceActivity",
          "$designer": {
            "id": "D2FtKS"
          },
          "name": "EnterpriseAssistant.OnIntent_BotTour"
        },
        {
          "$kind": "Microsoft.BeginDialog",
          "$designer": {
            "id": "6JAmBh",
            "comment": "Launches the BotTourDialog for guiding the user through the utterances the bot can handle."
          },
          "activityProcessed": true,
          "dialog": "BotTourDialog",
          "resultProperty": "turn.result"
        },
        {
          "$kind": "Microsoft.IfCondition",
          "$designer": {
            "id": "0tDgZH",
            "comment": "If the BotTourDialog returns false."
          },
          "condition": "=not(turn.result)",
          "elseActions": [],
          "actions": [
            {
              "$kind": "Microsoft.RepeatDialog",
              "$designer": {
                "id": "JpprmM",
                "comment": "Repeats this dialog and reprocesses the unhandled activity."
              },
              "activityProcessed": false
            }
          ]
        }
      ],
      "condition": "=turn.recognized.score > 0.8"
    },
    {
      "$kind": "Microsoft.OnIntent",
      "$designer": {
        "id": "e1i6lY",
        "name": "Cancel",
        "comment": "Triggered when the Cancel intent is recognized in the user's utterance."
      },
      "intent": "Cancel",
      "actions": [
        {
          "$kind": "Microsoft.TraceActivity",
          "$designer": {
            "id": "hGYYdd"
          },
          "name": "EnterpriseAssistant.OnIntent_Cancel"
        },
        {
          "$kind": "Microsoft.SendActivity",
          "$designer": {
            "id": "bGYBta",
            "comment": "Shows a cancellation message to the user."
          },
          "activity": "${SendActivity_bGYBta()}"
        },
        {
          "$kind": "Microsoft.DeleteProperty",
          "$designer": {
            "id": "JoL99F",
            "comment": "Clears the activeSkill property to prevent the next message from being routed to a skill."
          },
          "property": "conversation.activeSkill"
        },
        {
          "$kind": "Microsoft.CancelAllDialogs",
          "$designer": {
            "id": "5BAUTN",
            "comment": "Cancels all active dialogs."
          },
          "activityProcessed": true
        }
      ],
      "condition": "=turn.recognized.score > 0.8"
    },
    {
      "$kind": "Microsoft.OnChooseIntent",
      "$designer": {
        "id": "YuA75w",
        "comment": "Triggered when the user's utterance scores similarly on two different intents."
      },
      "actions": [
        {
          "$kind": "Microsoft.SetProperties",
          "$designer": {
            "id": "VutAjG"
          },
          "assignments": [
            {
              "property": "turn.minThreshold",
              "value": 0.5
            },
            {
              "property": "turn.maxChoices",
              "value": 3
            },
            {
              "property": "conversation.lastAmbiguousUtterance",
              "value": "=turn.activity.text"
            },
            {
              "property": "dialog.candidates",
              "value": "=take(sortByDescending(where(flatten(select(turn.recognized.candidates, x, if (x.intent==\"ChooseIntent\", x.result.candidates, x))), c, not(startsWith(c.intent, \"DeferToRecognizer_QnA\")) && c.score > turn.minThreshold), 'score'), turn.maxChoices)"
            }
          ]
        },
        {
          "$kind": "Microsoft.SwitchCondition",
          "$designer": {
            "id": "uCZ5AG",
            "comment": "Switches based on number of candidates."
          },
          "condition": "=string(count(dialog.candidates))",
          "cases": [
            {
              "value": "0",
              "actions": [
                {
                  "$kind": "Microsoft.EmitEvent",
                  "$designer": {
                    "id": "s7XJNJ",
                    "comment": "If there are 0 candidates, emits an unknownIntent event and cancels the dialog."
                  },
                  "eventName": "unknownIntent",
                  "handledProperty": "turn.eventHandled"
                },
                {
                  "$kind": "Microsoft.EndDialog",
                  "$designer": {
                    "id": "xORMrt"
                  }
                }
              ]
            },
            {
              "value": "1",
              "actions": [
                {
                  "$kind": "Microsoft.EmitEvent",
                  "$designer": {
                    "id": "1dcLLx",
                    "comment": "If there is 1 candidate, emits a recognizedIntent event for that intent and cancels the dialog."
                  },
                  "eventName": "recognizedIntent",
                  "eventValue": "=first(dialog.candidates).result",
                  "handledProperty": "turn.eventHandled"
                },
                {
                  "$kind": "Microsoft.EndDialog",
                  "$designer": {
                    "id": "h5Aagx"
                  }
                }
              ]
            }
          ]
        },
        {
          "$kind": "Microsoft.TextInput",
          "$designer": {
            "id": "I11eFC",
            "comment": "Shows card with candidate intent values for user to select from."
          },
          "maxTurnCount": 3,
          "alwaysPrompt": true,
          "allowInterruptions": false,
          "prompt": "${SendActivity_ChooseIntentPrompt()}",
          "property": "turn.intentChoice",
          "value": "=@userChosenIntent",
          "top": 3,
          "cardNoMatchResponse": "Thanks for the feedback.",
          "cardNoMatchText": "None of the above.",
          "activeLearningCardTitle": "Did you mean:",
          "threshold": 0.3,
          "noAnswer": "Sorry, I did not find an answer.",
          "hostname": "=settings.qna.hostname",
          "endpointKey": "=settings.qna.endpointkey",
          "knowledgeBaseId": "=settings.qna.knowledgebaseid"
        },
        {
          "$kind": "Microsoft.IfCondition",
          "$designer": {
            "id": "tjutdL",
            "comment": "If user's choice is not equal to 'none'."
          },
          "condition": "=turn.intentChoice != 'none'",
          "actions": [
            {
              "$kind": "Microsoft.EmitEvent",
              "$designer": {
                "id": "IazF4M",
                "comment": "Emits a recognizedIntent event for the selected intent."
              },
              "eventName": "recognizedIntent",
              "eventValue": "=dialog.candidates[int(turn.intentChoice)].result",
              "handledProperty": "turn.eventHandled"
            }
          ],
          "elseActions": [
            {
              "$kind": "Microsoft.SendActivity",
              "$designer": {
                "id": "48DXRF"
              },
              "activity": "${SendActivity_ChooseNoIntent()}"
            }
          ],
          "top": 3,
          "cardNoMatchResponse": "Thanks for the feedback.",
          "cardNoMatchText": "None of the above.",
          "activeLearningCardTitle": "Did you mean:",
          "threshold": 0.3,
          "noAnswer": "Sorry, I did not find an answer.",
          "hostname": "=settings.qna.hostname",
          "endpointKey": "=settings.qna.endpointkey",
          "knowledgeBaseId": "=settings.qna.knowledgebaseid"
        }
      ]
    },
    {
      "$kind": "Microsoft.OnError",
      "$designer": {
        "id": "cTGK2P",
        "name": "Error occurred",
        "comment": "Triggered when an error event is thrown by the dialog stack."
      },
      "actions": [
        {
          "$kind": "Microsoft.TraceActivity",
          "$designer": {
            "id": "1WJLFA"
          },
          "name": "EnterpriseAssistant.OnError"
        },
        {
          "$kind": "Microsoft.TelemetryTrackEventAction",
          "$designer": {
            "id": "Aucn7t",
            "comment": "Logs the error received in the Telelmetry Client (typically Application Insights for production instances)."
          },
          "eventName": "ErrorOccurred",
          "properties": {
            "Type": "=turn.dialogEvent.value.className",
            "Exception": "=turn.dialogEvent.value"
          }
        },
        {
          "$kind": "Microsoft.SwitchCondition",
          "$designer": {
            "id": "sEtHcf",
            "comment": "Checks the user's channel."
          },
          "condition": "turn.activity.channelId",
          "cases": [
            {
              "value": "test",
              "actions": [
                {
                  "$kind": "Microsoft.SendActivity",
                  "$designer": {
                    "id": "T9zEr4",
                    "comment": "In 'test' channel used by bot unit tests, prints out full error so it can be seen in test output window."
                  },
                  "activity": "${SendActivity_T9zEr4()}"
                }
              ]
            },
            {
              "value": "emulator",
              "actions": [
                {
                  "$kind": "Microsoft.IfCondition",
                  "$designer": {
                    "id": "QVRnBT",
                    "comment": "In emulator, if the skill settings are not correctly configured, shows a custom message instructing user how to set up their bot settings."
                  },
                  "condition": "=exists(settings.skill) && (not(exists(settings.runtimeSettings.skills.allowedCallers)) || count(where(settings.runtimeSettings.skills.allowedCallers, x, x != '')) == 0)",
                  "actions": [
                    {
                      "$kind": "Microsoft.SendActivity",
                      "$designer": {
                        "id": "UopnaT"
                      },
                      "activity": "${SendActivity_UopnaT()}"
                    }
                  ]
                },
                {
                  "$kind": "Microsoft.TraceActivity",
                  "$designer": {
                    "id": "EqWeYD",
                    "comment": "For all other errors in emulator, prints the error in a trace activity that is displayed in the logs."
                  },
                  "name": "Error",
                  "value": "=turn.dialogEvent.value"
                }
              ]
            }
          ],
          "default": [
            {
              "$kind": "Microsoft.SendActivity",
              "$designer": {
                "id": "SYFXJJ",
                "comment": "Default error behavior is to show a generic error message to user."
              },
              "activity": "${SendActivity_ErrorOccured()}"
            }
          ]
        }
      ]
    },
    {
      "$kind": "Microsoft.OnIntent",
      "$designer": {
        "id": "pRdAAf",
        "name": "Feedback",
        "comment": "Triggered when the Feedback intent is recognized in the user's utterance.\n"
      },
      "intent": "Feedback",
      "actions": [
        {
          "$kind": "Microsoft.TraceActivity",
          "$designer": {
            "id": "tXHBt0"
          },
          "name": "EnterpriseAssistant.OnIntent_Feedback"
        },
        {
          "$kind": "Microsoft.BeginDialog",
          "$designer": {
            "id": "2pSztz",
            "comment": "Launches the FeedbackDialog."
          },
          "activityProcessed": true,
          "dialog": "FeedbackDialog"
        }
      ],
      "condition": "=turn.recognized.score > 0.8"
    },
    {
      "$kind": "Microsoft.OnIntent",
      "$designer": {
        "id": "9wETGs",
        "name": "Help",
        "comment": "Triggered when the Help intent is recognized in the user's utterance."
      },
      "intent": "Help",
      "actions": [
        {
          "$kind": "Microsoft.TraceActivity",
          "$designer": {
            "id": "2mE4eA"
          },
          "name": "EnterpriseAssistant.OnIntent_Help"
        },
        {
          "$kind": "Microsoft.SendActivity",
          "$designer": {
            "id": "zlXdEy",
            "comment": "Shows a help message to the user."
          },
          "activity": "${SendActivity_zlXdEy()}"
        }
      ],
      "condition": "=turn.recognized.score > 0.8"
    },
    {
      "$kind": "Microsoft.OnUnknownIntent",
      "$designer": {
        "id": "v9Stie",
        "name": "Unknown intent",
        "comment": "This trigger fires when an incoming activity is not handled by any other trigger."
      },
      "actions": [
        {
          "$kind": "Microsoft.TraceActivity",
          "$designer": {
            "id": "nekhCR"
          },
          "name": "EnterpriseAssistant.UnknownIntent"
        },
        {
          "$kind": "Microsoft.IfCondition",
          "$designer": {
            "id": "zG90cd",
            "comment": "If a skillId is present in the activity.value, it means the user clicked a button in a skill card."
          },
          "condition": "=turn.activity.value.skillId != null",
          "actions": [
            {
              "$kind": "Microsoft.EmitEvent",
              "$designer": {
                "id": "ocOoKo",
                "comment": "Route activity to the specified skill."
              },
              "eventName": "ConnectToSkill",
              "eventValue": "=turn.activity.value.skillId",
              "handledProperty": "turn.eventHandled"
            }
          ],
          "elseActions": [
            {
              "$kind": "Microsoft.IfCondition",
              "$designer": {
                "id": "VogQ3v",
                "comment": "If there was no skill specificed and activity.text has a value, routes to the ChitchatDialog as a fallback."
              },
              "condition": "exists(turn.activity.text)",
              "actions": [
                {
                  "$kind": "Microsoft.BeginDialog",
                  "$designer": {
                    "id": "P9A5BW",
                    "comment": "Launches the ChitchatDialog."
                  },
                  "activityProcessed": false,
                  "dialog": "ChitchatDialog"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "$kind": "Microsoft.OnIntent",
      "$designer": {
        "id": "Qg31vS",
        "name": "OnIntent (Calendar)",
        "comment": "Triggered when the Calendar intent is recognized in the user's utterance."
      },
      "intent": "Calendar",
      "actions": [
        {
          "$kind": "Microsoft.TraceActivity",
          "$designer": {
            "id": "qwgcOJ"
          },
          "name": "EnterpriseAssistant.OnIntent_Calendar"
        },
        {
          "$kind": "Microsoft.EmitEvent",
          "$designer": {
            "id": "aEgt1o",
            "comment": "Emits the ConnectToSkill event with a value of 'Calendar'."
          },
          "eventName": "ConnectToSkill",
          "eventValue": "Calendar",
          "handledProperty": "turn.eventHandled"
        }
      ],
      "condition": "=turn.recognized.score > 0.8 && conversation.activeSkill != 'Calendar'"
    },
    {
      "$kind": "Microsoft.OnIntent",
      "$designer": {
        "id": "Qg314h",
        "name": "OnIntent (People)",
        "comment": "Triggered when the People intent is recognized in the user's utterance."
      },
      "intent": "People",
      "actions": [
        {
          "$kind": "Microsoft.TraceActivity",
          "$designer": {
            "id": "Ii2PVZ"
          },
          "name": "EnterpriseAssistant.OnIntent_People"
        },
        {
          "$kind": "Microsoft.EmitEvent",
          "$designer": {
            "id": "CPu21u",
            "comment": "Emits the ConnectToSkill event with a value of 'People'."
          },
          "eventName": "ConnectToSkill",
          "eventValue": "People",
          "handledProperty": "turn.eventHandled"
        }
      ],
      "condition": "=turn.recognized.score > 0.8 && conversation.activeSkill != 'People'"
    },
    {
      "$kind": "Microsoft.OnDialogEvent",
      "$designer": {
        "id": "gzU9PV",
        "name": "OnEvent (ConnectToSkill)",
        "comment": "Handles the 'ConnectToSkill' event and routes activities to skills."
      },
      "event": "ConnectToSkill",
      "actions": [
        {
          "$kind": "Microsoft.TraceActivity",
          "$designer": {
            "id": "egazMG"
          },
          "name": "EnterpriseAssistant.OnEvent_ConnectToSkill"
        },
        {
          "$kind": "Microsoft.SetProperty",
          "$designer": {
            "id": "lhQpmI",
            "comment": "Extracts the skillId from the event value."
          },
          "property": "$skillId",
          "value": "=turn.dialogEvent.value"
        },
        {
          "$kind": "Microsoft.SwitchCondition",
          "$designer": {
            "id": "G7uyeC",
            "comment": "Switches on possible skillId values."
          },
          "condition": "$skillId",
          "cases": [
            {
              "value": "Calendar",
              "actions": [
                {
                  "$kind": "Microsoft.SetProperty",
                  "$designer": {
                    "id": "Fvjb09",
                    "comment": "Sets activeSkill property to 'Calendar'. This property is used to route any new unrecognized utterances to the skill."
                  },
                  "property": "conversation.activeSkill",
                  "value": "Calendar"
                },
                {
                  "$kind": "Microsoft.BeginSkill",
                  "$designer": {
                    "id": "lnBCke",
                    "comment": "Launches the connect to a skill dialog. This node acts as a new dialog on top of the stack that routes activities to and from the skill.\n\nWhen the skill completes, it should pass a true/false property as a result that indicates whether the user's utterance was handled or if it needs to be handled by the calling dialog."
                  },
                  "activityProcessed": false,
                  "botId": "=settings.MicrosoftAppId",
                  "skillHostEndpoint": "=settings.skillHostEndpoint",
                  "connectionName": "=settings.connectionName",
                  "allowInterruptions": true,
                  "skillEndpoint": "=settings.skill['Calendar'].endpointUrl",
                  "skillAppId": "=settings.skill['Calendar'].msAppId",
                  "resultProperty": "$skillHandled"
                }
              ]
            },
            {
              "value": "People",
              "actions": [
                {
                  "$kind": "Microsoft.SetProperty",
                  "$designer": {
                    "id": "cx0OI0",
                    "comment": "Sets activeSkill property to 'People'. This property is used to route any new unrecognized utterances to the skill."
                  },
                  "property": "conversation.activeSkill",
                  "value": "People"
                },
                {
                  "$kind": "Microsoft.BeginSkill",
                  "$designer": {
                    "id": "1Hw4uy",
                    "comment": "Launches the connect to a skill dialog. This node acts as a new dialog on top of the stack that routes activities to and from the skill.\n\nWhen the skill completes, it should pass a true/false property as a result that indicates whether the user's utterance was handled or if it needs to"
                  },
                  "activityProcessed": false,
                  "botId": "=settings.MicrosoftAppId",
                  "skillHostEndpoint": "=settings.skillHostEndpoint",
                  "connectionName": "=settings.connectionName",
                  "allowInterruptions": true,
                  "skillEndpoint": "=settings.skill['People'].endpointUrl",
                  "skillAppId": "=settings.skill['People'].msAppId",
                  "resultProperty": "$skillHandled"
                }
              ]
            }
          ]
        },
        {
          "$kind": "Microsoft.DeleteProperty",
          "$designer": {
            "id": "2rIt4u",
            "comment": "After the skill conversation completes, clears the activeSkill property."
          },
          "property": "conversation.activeSkill"
        },
        {
          "$kind": "Microsoft.IfCondition",
          "$designer": {
            "id": "RieQAx",
            "comment": "If the skillHandled property is false, indicating that the user's utterance was not handled, repeat this dialog with 'Activity Processed' set to false to allow the utterance to be reevaluated by the recognizer."
          },
          "condition": "=exists($skillHandled) && $skillHandled == false",
          "actions": [
            {
              "$kind": "Microsoft.TraceActivity",
              "$designer": {
                "id": "UTQYW4"
              },
              "name": "AfterSkillComplete"
            },
            {
              "$kind": "Microsoft.RepeatDialog",
              "$designer": {
                "id": "H7Nrkt"
              },
              "activityProcessed": false,
              "allowLoop": false
            }
          ]
        }
      ]
    },
    {
      "$kind": "Microsoft.OnError",
      "$designer": {
        "id": "p2TtS8",
        "name": "Error occurred (Error event)"
      },
      "actions": [
        {
          "$kind": "Microsoft.SendActivity",
          "$designer": {
            "id": "Pnp6AO"
          },
          "activity": "${SendActivity_Pnp6AO()}"
        }
      ]
    }
  ],
  "generator": "EnterpriseAssistant.lg",
  "id": "EnterpriseAssistant",
  "recognizer": "EnterpriseAssistant.lu.qna"
}
