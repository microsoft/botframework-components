// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

const { ActivityHandler, ActivityTypes, DeliveryModes, MessageFactory } = require('botbuilder');

class HostBot extends ActivityHandler {
  constructor (dialog, conversationState, skillsConfig, skillClient) {
    super();
    if (!conversationState) throw new Error('[HostBot]: Missing parameter. conversationState is required');
    if (!skillsConfig) throw new Error('[HostBot]: Missing parameter. skillsConfig is required');
    if (!skillClient) throw new Error('[HostBot]: Missing parameter. skillClient is required');

    this.conversationState = conversationState;
    this.skillsConfig = skillsConfig;
    this.skillClient = skillClient;
    this.dialog = dialog;
    this.dialogStateProperty = this.conversationState.createProperty('DialogState');

    this.botId = process.env.MicrosoftAppId;

    // Create state property to track the delivery mode and active skill.
    this.deliveryModeProperty = this.conversationState.createProperty(HostBot.DeliveryModePropertyName);
    this.activeSkillProperty = this.conversationState.createProperty(HostBot.ActiveSkillPropertyName);

    this.onTurn(async (context, next) => {
      // Forward all activities except EndOfConversation to the active skill.
      if (context.activity.type !== ActivityTypes.EndOfConversation) {
        // Try to get the active skill.
        const activeSkill = await this.activeSkillProperty.get(context);

        if (activeSkill) {
          const deliveryMode = await this.deliveryModeProperty.get(context);

          // Send the activity to the skill
          await this.sendToSkill(context, deliveryMode, activeSkill);
          return;
        }
      }

      await next();
    });

    // See https://aka.ms/about-bot-activity-message to learn more about the message and other activity types.
    this.onMessage(async (context, next) => {
      const deliveryMode = await this.deliveryModeProperty.get(context);
      const selectedSkill = this.skillsConfig.skills[context.activity.text];
      const v3Bots = ['EchoSkillBotDotNetV3', 'EchoSkillBotJSV3'];

      if (selectedSkill && deliveryMode === DeliveryModes.ExpectReplies && v3Bots.includes(selectedSkill.id)) {
        const message = MessageFactory.text("V3 Bots do not support 'expectReplies' delivery mode.");
        await context.sendActivity(message);

        // Forget delivery mode and skill invocation.
        await this.deliveryModeProperty.delete(context);
        await this.activeSkillProperty.delete(context);

        // Restart setup dialog
        await this.conversationState.delete(context);
      }

      await this.dialog.run(context, this.dialogStateProperty);
    });

    this.onEndOfConversation(async (context, next) => {
      // Handle EndOfConversation returned by the skill.
      await this.EndConversation(context.activity, context);

      // By calling next() you ensure that the next BotHandler is run.
      await next();
    });

    this.onMembersAdded(async (context, next) => {
      const membersAdded = context.activity.membersAdded;
      for (let cnt = 0; cnt < membersAdded.length; ++cnt) {
        if (membersAdded[cnt].id !== context.activity.recipient.id) {
          await context.sendActivity('Hello and welcome!');
          await this.dialog.run(context, this.dialogStateProperty);
        }
      }

      // By calling next() you ensure that the next BotHandler is run.
      await next();
    });
  }

  async EndConversation (activity, context) {
    if (activity.type === ActivityTypes.EndOfConversation) {
      // Forget delivery mode and skill invocation.
      await this.deliveryModeProperty.delete(context);
      await this.activeSkillProperty.delete(context);

      // Show status message, text and value returned by the skill.
      let eocActivityMessage = `Received ${ActivityTypes.EndOfConversation}.\n\nCode: ${activity.code}.`;
      if (activity.text) {
        eocActivityMessage += `\n\nText: ${activity.text}`;
      }

      if (activity.value) {
        eocActivityMessage += `\n\nValue: ${activity.value}`;
      }

      await context.sendActivity(eocActivityMessage);

      // We are back at the host.
      await context.sendActivity('Back in the host bot.');

      // Restart setup dialog
      await this.dialog.run(context, this.dialogStateProperty);

      await this.conversationState.saveChanges(context);
    }
  }

  async sendToSkill (context, deliveryMode, targetSkill) {
    // NOTE: Always SaveChanges() before calling a skill so that any activity generated by the skill
    // will have access to current accurate state.
    await this.conversationState.saveChanges(context, true);

    if (deliveryMode === DeliveryModes.ExpectReplies) {
      // Clone activity and update its delivery mode.
      const activity = JSON.parse(JSON.stringify(context.activity));
      activity.deliveryMode = deliveryMode;

      // Route the activity to the skill.
      const expectRepliesResponse = await this.skillClient.postToSkill(this.botId, targetSkill, this.skillsConfig.skillHostEndpoint, activity);

      // Check response status.
      if (!(expectRepliesResponse.status >= 200 && expectRepliesResponse.status <= 299)) {
        throw new Error(`[HostBot]: Error invoking the skill id: "${targetSkill.id}" at "${targetSkill.skillEndpoint}" (status is ${expectRepliesResponse.status}). \r\n ${expectRepliesResponse.body}`);
      }

      if (expectRepliesResponse.body && expectRepliesResponse.body.activities) {
        // Route response activities back to the channel.
        const responseActivities = expectRepliesResponse.body.activities;

        for (let index = 0; index < responseActivities.length; index++) {
          if (responseActivities[index].type === ActivityTypes.EndOfConversation) {
            await this.EndConversation(responseActivities[index], context);
          } else {
            await context.sendActivity(responseActivities[index]);
          }
        }
      }
    } else {
      // Route the activity to the skill.
      const response = await this.skillClient.postToSkill(this.botId, targetSkill, this.skillsConfig.skillHostEndpoint, context.activity);

      // Check response status.
      if (!(response.status >= 200 && response.status <= 299)) {
        throw new Error(`[HostBot]: Error invoking the skill id: "${targetSkill.id}" at "${targetSkill.skillEndpoint}" (status is ${response.status}). \r\n ${response.body}`);
      }
    }
  }

  /**
     * Override the ActivityHandler.run() method to save state changes after the bot logic completes.
     */
  async run (context) {
    await super.run(context);

    // Save any state changes. The load happened during the execution of the Dialog.
    await this.conversationState.saveChanges(context, false);
  }
}

module.exports.HostBot = HostBot;
HostBot.ActiveSkillPropertyName = 'activeSkillProperty';
HostBot.DeliveryModePropertyName = 'deliveryModeProperty';
