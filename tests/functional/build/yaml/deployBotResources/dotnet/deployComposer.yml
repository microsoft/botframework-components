parameters:
  - name: appInsight
    displayName: Azure Application Insight name
    type: string

  - name: appServicePlan
    displayName: App Service Plan name
    type: string

  - name: appServicePlanRG
    displayName: App Service Plan Resource Group
    type: string

  - name: azureSubscription
    displayName: Azure Service Connection
    type: string

  - name: botPricingTier
    displayName: Bot Pricing Tier
    type: string

  - name: bots
    displayName: Bots
    type: object

  - name: buildFolder
    displayName: Build Folder
    type: string
    default: "build-composer"

  - name: keyVault
    displayName: Key Vault name
    type: string

  - name: resourceGroup
    displayName: Resource Group
    type: string

  - name: resourceSuffix
    displayName: Azure resources' name suffix
    type: string

stages:
- ${{ each bot in parameters.bots }}:
  - stage: "Deploy_${{ bot.name }}"
    ${{ if eq(bot.displayName, '') }}:
      displayName: "${{ bot.name }}"
    ${{ if ne(bot.displayName, '') }}:
      displayName: "${{ bot.displayName }}"
    dependsOn: "${{ bot.dependsOn }}"
    jobs:
      - job: "Deploy"
        displayName: "Deploy steps"
        steps:
          # Delete Bot Resources
          - template: ../common/deleteResources.yml
            parameters:
              azureSubscription: "${{ parameters.azureSubscription }}"
              resourceGroup: "${{ parameters.resourceGroup }}"
              resourceName: "${{ bot.name }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"

          # Gets Bot App Registration credentials from KeyVault or Pipeline Variables
          - template: ../common/getAppRegistration.yml
            parameters:
              appId: ${{ bot.appId }}
              appSecret: ${{ bot.appSecret }}
              azureSubscription: "${{ parameters.azureSubscription }}"
              botName: "${{ bot.name }}"
              keyVault: "${{ parameters.keyVault }}"

          # Use Net Core version
          - ${{ if ne(bot.project.netCoreVersion, '') }}:
            - task: UseDotNet@2
              displayName: "Use NetCore v${{ bot.project.netCoreVersion }}"
              inputs:
                version: "${{ bot.project.netCoreVersion }}"

          # Evaluate dependencies source and version
          - template: evaluateDependenciesVariables.yml
            parameters:
              botType: "${{ bot.type }}"
              registry: "${{ bot.dependency.registry }}"
              version: "${{ bot.dependency.version }}"

          # Start of DotNet Install & Build
          - template: installDependencies.yml
            parameters:
              project: "${{ bot.project }}"
              registry: "$(DEPENDENCIESSOURCE)"
              version: "$(DEPENDENCIESVERSIONNUMBER)"
              packages:
                Microsoft.Bot.Builder.AI.Luis
                Microsoft.Bot.Builder.AI.QnA
                Microsoft.Bot.Builder.Dialogs.Adaptive.Runtime

          # Build Bot
          - task: DotNetCoreCLI@2
            displayName: "Build"
            inputs:
              command: publish
              publishWebProjects: false
              projects: "${{ bot.project.directory }}/${{ bot.project.name }}"
              arguments: "--output $(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ parameters.buildFolder }}/${{ bot.name }}"
              modifyOutputPath: false

          # Get BotBuilder package version
          - task: PowerShell@2
            displayName: 'Get BotBuilder Version'
            inputs:
              targetType: inline
              workingDirectory: '$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ bot.project.directory }}'
              failOnStderr: true
              script: |
                [XML]$data = Get-Content "./${{ bot.project.name }}"
                $package = $data.Project.ItemGroup.PackageReference | Where-Object { $_.Include -eq "Microsoft.Bot.Builder.Dialogs.Adaptive.Runtime" }
                Write-Host "##vso[task.setvariable variable=BotBuilderVersionNumber]$($package.version)"

          # Tag BotBuilder package version
          - template: ../common/tagBotBuilderVersion.yml
            parameters:
              ${{ if eq(bot.displayName, '') }}:
                botName: "${{ bot.name }}"
              ${{ if ne(bot.displayName, '') }}:
                botName: "${{ bot.displayName }}"
              version: "$(BOTBUILDERVERSIONNUMBER)"

          # Upload zip to artifacts in case we want to debug it
          - task: PublishBuildArtifacts@1
            displayName: 'Publish zip package'
            inputs:
              pathToPublish: "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ parameters.buildFolder }}/${{ bot.name }}/${{ bot.name }}.zip"
              artifactName: dotnet-$(BUILD.BUILDID)

          # Create App Service and Bot Channel Registration
          - template: ../common/createAppService.yml
            parameters:
              appId: $(APPID)
              appInsight: "${{ parameters.appInsight }}"
              appSecret: $(APPSECRET)
              appServicePlan: "${{ parameters.appServicePlan }}"
              appServicePlanRG: "${{ parameters.appServicePlanRG }}"
              azureSubscription: "${{ parameters.azureSubscription }}"
              botGroup: "${{ parameters.resourceGroup }}"
              botName: "${{ bot.name }}"
              botPricingTier: "${{ parameters.botPricingTier }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"
              templateFile: "build/templates/template-bot-resources.json"

          # Deploy bot
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : ${{ bot.name }}-$(BUILD.BUILDID)'
            inputs:
              azureSubscription: "${{ parameters.azureSubscription }}"
              appName: '${{ bot.name }}${{ parameters.resourceSuffix }}-$(BUILD.BUILDID)'
              resourceGroupName: '${{ parameters.resourceGroup }}'
              package: '$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ parameters.buildFolder }}/${{ bot.name }}/${{ bot.name }}.zip'
              deploymentMethod: runFromPackage

          # Create DirectLine Channel Hosts
          - ${{ if eq(bot.type, 'Host') }}:
            - template: ../common/createDirectLine.yml
              parameters:
                azureSubscription: "${{ parameters.azureSubscription }}"
                botGroup: "${{ parameters.resourceGroup }}"
                botName: "${{ bot.name }}"
                resourceSuffix: "${{ parameters.resourceSuffix }}"
