steps:
# You are probably wondering "Why not just run 'yarn exec npm run --if-present test'?".
# On Azure Pipelines, yarn install by default restores modules to a global node_modules cache
# instead of a local package cache. When running the npm CLI, it is unable to resolve required
# dependencies as a result, whereas yarn run <script> can do so successfully. However,
# yarn does not yet have an --if-present condition - the immediate step below simulates this
# by manually reading the package.json and checking for the presence of $.scripts.test in the JSON.
- powershell: |
    if (Test-Path -Path package.json) {
      $package = Get-Content package.json | ConvertFrom-Json
      $result = $package.scripts -and $package.scripts.test
      Write-Host "##vso[task.setvariable variable=YarnRunTest;]$result"
    } else {
      Write-Host "Missing package.json"
      exit 1
    }
  displayName: 'Determine if test script is present'
  name: SetYarnRunTest
  workingDirectory: '$(WorkingDirectory)'

- script: |
    yarn run test
  condition: eq(variables.YarnRunTest, true)
  continueOnError: true
  displayName: 'Run `yarn test` if it exists'
  workingDirectory: '$(WorkingDirectory)'
