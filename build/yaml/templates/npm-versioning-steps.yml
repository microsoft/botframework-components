steps:
- powershell: |
    $deploymentRing = "$env:DEPLOYMENTRING";
    "Deployment Ring = $deploymentRing";

    $deploymentRingOverride = "$env:DEPLOYMENTRINGOVERRIDE";
    "Deployment Ring Override = $deploymentRingOverride";

    $componentType = "$env:COMPONENTTYPE";
    "Component Type = $componentType";

    if ($deploymentRingOverride) {
      $deploymentRing = $deploymentRingOverride;
    }

    if ($deploymentRing.ToLowerInvariant() -eq "rc") {
      $releaseCandidateNumber = "$env:RELEASECANDIDATENUMBER";
      "Release Candidate Number = $releaseCandidateNumber";

      if (-not $releaseCandidateNumber) {
        Write-Host "Release Candidate Number not defined"
        exit 1
      }

      $vs = $releaseCandidateNumber.ToLowerInvariant();
    } else {
      $dateStamp = (Get-Date -format "yyyyMMdd");
      $commitHash = "$(Build.SourceVersion)".SubString(0,7);
      $vs = "-" + $dateStamp + "." + $commitHash;
    }

    # Get and set version from package.json
    if (Test-Path -Path package.json) {
      # Get existing version from package.json
      $packageJson = Get-Content package.json;
      $packageJsonData = $packageJson | ConvertFrom-Json;
      $packageVersion = $packageJsonData.version
      "Version Prefix = $packageVersion";

      # Configure version suffix based on deployment ring
      if ($deploymentRing.ToLowerInvariant() -ne "stable") {
        # npm uses a slightly different version suffix pattern, so calculate that separately.
        $npmVersionSuffix = $deploymentRing + $vs;
        "Version Suffix = $npmVersionSuffix";
        $packageVersion += "-" + $npmVersionSuffix;
      }

      "Version = $packageVersion";
      Write-Host "##vso[task.setvariable variable=NpmPackageVersion;]$packageVersion";
    } else {
      Write-Host "Missing package.json"
      exit 1
    }
  displayName: 'Resolve package version variables'
  name: SetVersion
  workingDirectory: '$(WorkingDirectory)'

- task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0
  displayName: Tag build for NPM
  inputs: 
    tags: |
      NpmPackageVersion: $(NpmPackageVersion)
  continueOnError: true
