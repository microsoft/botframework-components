#
# Executes the test scenarios.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(BUILD.BUILDID)
trigger: none
pr: none

variables:
  BuildConfiguration: "Debug"

  ## Azure Resources (Define these variables in Azure)
  # AzureSubscription: Service Connection Name to Manage Azure resources.
  # ResourceGroup: (optional) Name of the Resource Group where the bots are deployed.
  # ResourceSuffix: (optional) Suffix to add to the resources' name to avoid collitions.

  ## Bots Configuration (Define these variables in Azure)
  # BfcfnEmptyBotDotNetWebAppId: (optional) App Id for BfcfnEmptyBotDotNetWebApp bot.
  # BfcfnEmptyBotDotNetFunctionsId: (optional) App Id for BfcfnEmptyBotDotNetFunctions bot.
  # BfcfnEmptyBotJSWebAppId: (optional) App Id for BfcfnEmptyBotJSWebApp bot.
  # BfcfnEmptyBotJSFunctionsId: (optional) App Id for BfcfnEmptyBotJSFunctions bot.

  # DeployBotResourcesGuid: (optional) Deploy Bot Resources pipeline GUID.

  ## Internal variables
  InternalKeyVaultName: "ComponentsBotsKeyVault$(INTERNALRESOURCESUFFIX)"
  InternalResourceGroupName: $[coalesce(variables['RESOURCEGROUP'], 'bfcfnbots')]
  InternalResourceSuffix: $[coalesce(variables['RESOURCESUFFIX'], '')]

  NugetSecurityAnalysisWarningLevel: warn # Workaround: Sets the warning level of injected nuget security analysis to raise a warning in logs and set status to green. Visit https://aka.ms/nugetmultifeed for more details.

pool:
  vmImage: "windows-2022"

stages:
  - stage: "Download_Variables"
    displayName: "Download Variables"
    jobs:
      - job: "Download_Variables"
        displayName: "Download Variables"
        steps:
          - powershell: |
              $pipelineGuid = if ([string]::IsNullOrEmpty("$env:DEPLOYBOTRESOURCESGUID")) { "02 - Deploy Bot Resources" } else { "$(DEPLOYBOTRESOURCESGUID)" }
              Write-Host "Deploy Bot Resources Pipeline GUID: " $pipelineGuid
              Write-Host "##vso[task.setvariable variable=PipelineGuid]$pipelineGuid"
            displayName: "Set Deploy Bot Resources GUID"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Variables artifact"
            inputs:
              source: "specific"
              project: "$(SYSTEM.TEAMPROJECT)"
              pipeline: "$(PIPELINEGUID)"
              allowPartiallySucceededBuilds: true
              allowFailedBuilds: true
              artifact: "Variables"
              path: "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/Variables/"

          - powershell: |
              $deploymentBuildSuffix = (Get-Content -Path "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/Variables/variables.json" | ConvertFrom-Json).deploymentBuildSuffix
              Write-Host "Deployment Build Suffix: " $deploymentBuildSuffix
              Write-Host "##vso[task.setvariable variable=DeploymentBuildSuffix;isOutput=true]-$deploymentBuildSuffix"
            displayName: "Set variables"
            name: "Set_Variables"

  - template: runScenario.yml
    parameters:
      appIds:
        EmptyBotDotNetWebApp: "$(BFCFNEMPTYBOTDOTNETWEBAPPID)"
        EmptyBotDotNetFunctions: "$(BFCFNEMPTYBOTDOTNETFUNCTIONSID)"
        EmptyBotJSWebApp: "$(BFCFNEMPTYBOTJSWEBAPPID)"
        EmptyBotJSFunctions: "$(BFCFNEMPTYBOTJSFUNCTIONSID)"
      azureSubscription: "$(AZURESUBSCRIPTION)"
      buildConfiguration: "$(BUILDCONFIGURATION)"
      buildIdSuffix: $[stageDependencies.Download_Variables.Download_Variables.outputs['Set_Variables.DeploymentBuildSuffix']]
      keyVault: "$(INTERNALKEYVAULTNAME)"
      resourceGroup: "$(INTERNALRESOURCEGROUPNAME)"
      resourceSuffix: "$(INTERNALRESOURCESUFFIX)"
      scenarios:
        - name: EmptyBot
          dependsOn: [Download_Variables]
          testCategories:
            - EmptyBot
